//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyDive.Server
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MyDiveEntities : DbContext
    {
        public MyDiveEntities()
            : base("name=MyDiveEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int stp_AuthenticateLogin(string usename, string password)
        {
            var usenameParameter = usename != null ?
                new ObjectParameter("usename", usename) :
                new ObjectParameter("usename", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_AuthenticateLogin", usenameParameter, passwordParameter);
        }
    
        public virtual int stp_CreateDiveLog(Nullable<int> siteID, Nullable<double> maxDepth, string description, Nullable<int> diveTypeID, Nullable<int> userID, Nullable<int> bottomTypeID, Nullable<int> salinityUD, Nullable<int> waterTypeID, string location)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var maxDepthParameter = maxDepth.HasValue ?
                new ObjectParameter("MaxDepth", maxDepth) :
                new ObjectParameter("MaxDepth", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var diveTypeIDParameter = diveTypeID.HasValue ?
                new ObjectParameter("DiveTypeID", diveTypeID) :
                new ObjectParameter("DiveTypeID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var bottomTypeIDParameter = bottomTypeID.HasValue ?
                new ObjectParameter("BottomTypeID", bottomTypeID) :
                new ObjectParameter("BottomTypeID", typeof(int));
    
            var salinityUDParameter = salinityUD.HasValue ?
                new ObjectParameter("SalinityUD", salinityUD) :
                new ObjectParameter("SalinityUD", typeof(int));
    
            var waterTypeIDParameter = waterTypeID.HasValue ?
                new ObjectParameter("WaterTypeID", waterTypeID) :
                new ObjectParameter("WaterTypeID", typeof(int));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_CreateDiveLog", siteIDParameter, maxDepthParameter, descriptionParameter, diveTypeIDParameter, userIDParameter, bottomTypeIDParameter, salinityUDParameter, waterTypeIDParameter, locationParameter);
        }
    
        public virtual int stp_CreateNewWish(Nullable<int> siteID, Nullable<int> userID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("siteID", siteID) :
                new ObjectParameter("siteID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_CreateNewWish", siteIDParameter, userIDParameter);
        }
    
        public virtual int stp_CreateUser(string username, string password, string email, string firstName, string lastName, Nullable<int> associationID, string userLicenseNumber, Nullable<int> licenseTypeID, Nullable<System.DateTime> birthday)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var associationIDParameter = associationID.HasValue ?
                new ObjectParameter("AssociationID", associationID) :
                new ObjectParameter("AssociationID", typeof(int));
    
            var userLicenseNumberParameter = userLicenseNumber != null ?
                new ObjectParameter("UserLicenseNumber", userLicenseNumber) :
                new ObjectParameter("UserLicenseNumber", typeof(string));
    
            var licenseTypeIDParameter = licenseTypeID.HasValue ?
                new ObjectParameter("LicenseTypeID", licenseTypeID) :
                new ObjectParameter("LicenseTypeID", typeof(int));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_CreateUser", usernameParameter, passwordParameter, emailParameter, firstNameParameter, lastNameParameter, associationIDParameter, userLicenseNumberParameter, licenseTypeIDParameter, birthdayParameter);
        }
    
        public virtual ObjectResult<stp_GetAllCitiesByCountryId_Result> stp_GetAllCitiesByCountryId(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetAllCitiesByCountryId_Result>("stp_GetAllCitiesByCountryId", countryIDParameter);
        }
    
        public virtual ObjectResult<stp_GetAllClubsByCountryANDCityId_Result> stp_GetAllClubsByCountryANDCityId(Nullable<int> countryID, Nullable<int> cityID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("cityID", cityID) :
                new ObjectParameter("cityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetAllClubsByCountryANDCityId_Result>("stp_GetAllClubsByCountryANDCityId", countryIDParameter, cityIDParameter);
        }
    
        public virtual ObjectResult<stp_GetAllClubsByCountryId_Result> stp_GetAllClubsByCountryId(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetAllClubsByCountryId_Result>("stp_GetAllClubsByCountryId", countryIDParameter);
        }
    
        public virtual ObjectResult<stp_GetAllClubsBySearch_Result> stp_GetAllClubsBySearch(string searchKeyword)
        {
            var searchKeywordParameter = searchKeyword != null ?
                new ObjectParameter("searchKeyword", searchKeyword) :
                new ObjectParameter("searchKeyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetAllClubsBySearch_Result>("stp_GetAllClubsBySearch", searchKeywordParameter);
        }
    
        public virtual ObjectResult<stp_GetAllCountries_Result> stp_GetAllCountries()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetAllCountries_Result>("stp_GetAllCountries");
        }
    
        public virtual ObjectResult<stp_GetBottomType_Result> stp_GetBottomType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetBottomType_Result>("stp_GetBottomType");
        }
    
        public virtual ObjectResult<stp_GetCitiesByCountry_Result> stp_GetCitiesByCountry(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetCitiesByCountry_Result>("stp_GetCitiesByCountry", countryIDParameter);
        }
    
        public virtual ObjectResult<stp_GetClubInfo_Result> stp_GetClubInfo(Nullable<int> clubID)
        {
            var clubIDParameter = clubID.HasValue ?
                new ObjectParameter("clubID", clubID) :
                new ObjectParameter("clubID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetClubInfo_Result>("stp_GetClubInfo", clubIDParameter);
        }
    
        public virtual ObjectResult<stp_GetCountries_Result> stp_GetCountries()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetCountries_Result>("stp_GetCountries");
        }
    
        public virtual ObjectResult<stp_GetDiveTypes_Result> stp_GetDiveTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetDiveTypes_Result>("stp_GetDiveTypes");
        }
    
        public virtual ObjectResult<stp_GetSalinityTypes_Result> stp_GetSalinityTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetSalinityTypes_Result>("stp_GetSalinityTypes");
        }
    
        public virtual ObjectResult<stp_GetSiteInfoById_Result> stp_GetSiteInfoById(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("siteID", siteID) :
                new ObjectParameter("siteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetSiteInfoById_Result>("stp_GetSiteInfoById", siteIDParameter);
        }
    
        public virtual ObjectResult<stp_GetSitesByCountryAndCity_Result> stp_GetSitesByCountryAndCity(Nullable<int> countryID, Nullable<int> cityID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("cityID", cityID) :
                new ObjectParameter("cityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetSitesByCountryAndCity_Result>("stp_GetSitesByCountryAndCity", countryIDParameter, cityIDParameter);
        }
    
        public virtual ObjectResult<stp_GetSitesByKeywors_Result> stp_GetSitesByKeywors(string keyword)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetSitesByKeywors_Result>("stp_GetSitesByKeywors", keywordParameter);
        }
    
        public virtual ObjectResult<stp_GetUser_Result> stp_GetUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetUser_Result>("stp_GetUser", userIDParameter);
        }
    
        public virtual ObjectResult<stp_GetUserDiveLogs_Result> stp_GetUserDiveLogs(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetUserDiveLogs_Result>("stp_GetUserDiveLogs", userIDParameter);
        }
    
        public virtual ObjectResult<stp_GetUserWishList_Result> stp_GetUserWishList(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetUserWishList_Result>("stp_GetUserWishList", userIDParameter);
        }
    
        public virtual ObjectResult<stp_GetWaterTypes_Result> stp_GetWaterTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_GetWaterTypes_Result>("stp_GetWaterTypes");
        }
    
        public virtual int stp_RateClub(Nullable<int> clubID, Nullable<int> rate, string comment)
        {
            var clubIDParameter = clubID.HasValue ?
                new ObjectParameter("clubID", clubID) :
                new ObjectParameter("clubID", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("rate", rate) :
                new ObjectParameter("rate", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_RateClub", clubIDParameter, rateParameter, commentParameter);
        }
    
        public virtual int stp_RateSite(Nullable<int> siteID, Nullable<int> rate, string comment)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("siteID", siteID) :
                new ObjectParameter("siteID", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("rate", rate) :
                new ObjectParameter("rate", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_RateSite", siteIDParameter, rateParameter, commentParameter);
        }
    
        public virtual int stp_RemoveFromWishList(Nullable<int> userID, Nullable<int> siteID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("siteID", siteID) :
                new ObjectParameter("siteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_RemoveFromWishList", userIDParameter, siteIDParameter);
        }
    }
}
